#!/usr/bin/env python3
"""
Setup script for Advanced SQL Assistant
Helps with initial configuration and environment setup
"""

import os
import sys
import subprocess
import shutil
from pathlib import Path
import getpass


def print_banner():
    """Print welcome banner"""
    print("""
    ╔══════════════════════════════════════════════════════════════╗
    ║                                                              ║
    ║        🚀 Advanced SQL Assistant Setup Wizard 🚀            ║
    ║                                                              ║
    ║    Enterprise-grade SQL generation with AI-powered          ║
    ║    optimization, visualization, and business intelligence    ║
    ║                                                              ║
    ╚══════════════════════════════════════════════════════════════╝
    """)


def check_python_version():
    """Check if Python version is compatible"""
    min_version = (3, 8)
    current_version = sys.version_info[:2]

    if current_version < min_version:
        print(
            f"❌ Python {min_version[0]}.{min_version[1]}+ required. You have {current_version[0]}.{current_version[1]}")
        return False

    print(f"✅ Python {current_version[0]}.{current_version[1]} detected")
    return True


def install_requirements():
    """Install required Python packages"""
    print("\n📦 Installing required packages...")

    try:
        # Check if requirements.txt exists
        if not Path("requirements.txt").exists():
            print("❌ requirements.txt not found")
            return False

        # Install packages
        result = subprocess.run([
            sys.executable, "-m", "pip", "install", "-r", "requirements.txt"
        ], capture_output=True, text=True)

        if result.returncode == 0:
            print("✅ All packages installed successfully")
            return True
        else:
            print(f"❌ Package installation failed: {result.stderr}")
            return False

    except Exception as e:
        print(f"❌ Error during installation: {e}")
        return False


def create_env_file():
    """Create .env file with user input"""
    print("\n🔧 Setting up environment configuration...")

    # Check if .env already exists
    if Path(".env").exists():
        overwrite = input(
            "📄 .env file already exists. Overwrite? (y/N): ").lower()
        if overwrite != 'y':
            print("Keeping existing .env file")
            return True

    # Get Groq API key
    print("\n🔑 Groq API Configuration:")
    print("   Get your free API key from: https://console.groq.com/")
    groq_api_key = getpass.getpass("   Enter your Groq API key: ").strip()

    if not groq_api_key:
        print("❌ Groq API key is required")
        return False

    # Get database configuration
    print("\n🗄️  Database Configuration:")
    db_type = input(
        "   Database type (mysql/postgresql) [mysql]: ").lower() or "mysql"
    db_host = input("   Database host [localhost]: ").strip() or "localhost"

    if db_type == "mysql":
        db_port = input("   Database port [3306]: ").strip() or "3306"
    else:
        db_port = input("   Database port [5432]: ").strip() or "5432"

    db_name = input("   Database name: ").strip()
    db_user = input("   Database username: ").strip()
    db_password = getpass.getpass("   Database password: ").strip()

    # Advanced features
    print("\n⚡ Advanced Features:")
    enable_optimization = input(
        "   Enable query optimization? (Y/n): ").lower() != 'n'
    enable_ai_insights = input("   Enable AI insights? (Y/n): ").lower() != 'n'
    enable_pdf_reports = input("   Enable PDF reports? (Y/n): ").lower() != 'n'

    # Create .env content
    env_content = f"""# Advanced SQL Assistant Configuration
# Generated by setup wizard

# Groq API Configuration
GROQ_API_KEY={groq_api_key}

# Database Configuration
DB_HOST={db_host}
DB_PORT={db_port}
DB_NAME={db_name}
DB_USER={db_user}
DB_PASSWORD={db_password}

# Advanced Features
ENABLE_QUERY_OPTIMIZATION={str(enable_optimization).lower()}
ENABLE_AI_INSIGHTS={str(enable_ai_insights).lower()}
ENABLE_PDF_REPORTS={str(enable_pdf_reports).lower()}

# Performance Settings
MAX_QUERY_HISTORY=100
MAX_FAVORITES=50
QUERY_TIMEOUT_SECONDS=300
LLM_TEMPERATURE=0.1
LLM_MAX_TOKENS=1000

# Security Settings
ENABLE_SQL_VALIDATION=true
ALLOW_MODIFICATION_QUERIES=false

# Visualization Settings
ENABLE_INTERACTIVE_CHARTS=true
MAX_VISUALIZATION_ROWS=10000
DEFAULT_CHART_HEIGHT=500

# Export Settings
ENABLE_CSV_EXPORT=true
ENABLE_JSON_EXPORT=true
ENABLE_EXCEL_EXPORT=true
MAX_EXPORT_ROWS=100000

# Session Management
SESSION_TIMEOUT_HOURS=24

# Logging
LOG_LEVEL=INFO
LOG_QUERIES=true
LOG_PERFORMANCE=true
"""

    try:
        with open(".env", "w") as f:
            f.write(env_content)
        print("✅ .env file created successfully")
        return True
    except Exception as e:
        print(f"❌ Error creating .env file: {e}")
        return False


def test_configuration():
    """Test the configuration"""
    print("\n🧪 Testing configuration...")

    try:
        # Test Groq API
        print("   Testing Groq API connection...")
        result = subprocess.run([
            sys.executable, "test_groq_api_key.py"
        ], capture_output=True, text=True)

        if "SUCCESS" in result.stdout:
            print("   ✅ Groq API connection successful")
        else:
            print("   ⚠️  Groq API test had issues. Check your API key.")
            print(f"   Output: {result.stdout[:200]}...")

        # Test configuration validation
        print("   Testing configuration validation...")
        result = subprocess.run([
            sys.executable, "config.py"
        ], capture_output=True, text=True)

        if "Configuration is valid" in result.stdout:
            print("   ✅ Configuration validation passed")
        else:
            print("   ⚠️  Configuration validation warnings")
            print(f"   Output: {result.stdout[:200]}...")

        return True

    except Exception as e:
        print(f"   ❌ Testing error: {e}")
        return False


def create_sample_files():
    """Create sample files and documentation"""
    print("\n📚 Creating sample files...")

    # Create sample queries file
    sample_queries = """# Sample Queries for Advanced SQL Assistant

## Basic Analytics
- "How many records are in each table?"
- "Show me the top 10 rows from [table_name]"
- "What columns are available in [table_name]?"

## Business Intelligence
- "What's the total revenue by month?"
- "Show me customer segments by purchase behavior"
- "Find the most profitable products"

## Financial Analysis
- "Calculate profit margins for each product"
- "Show expense breakdown by category"
- "Compare actual vs budgeted amounts"

## Operational Queries
- "Find records with missing values"
- "Show data quality metrics"
- "Identify duplicate records"

## Advanced Analytics
- "Calculate running totals by month"
- "Show year-over-year growth rates"
- "Find statistical outliers in the data"

## Tips for Better Results:
1. Be specific about table names and time periods
2. Ask for specific metrics rather than general data
3. Use business terms that map to your database schema
4. Start with simple queries and build complexity gradually
"""

    try:
        with open("sample_queries.md", "w") as f:
            f.write(sample_queries)
        print("   ✅ sample_queries.md created")
    except:
        print("   ⚠️  Could not create sample_queries.md")

    # Create quick start guide
    quick_start = """# Quick Start Guide

## 1. Launch the Application
```bash
streamlit run main.py
```

## 2. Connect to Your Database
- Use the sidebar to enter your database credentials
- Click "Connect to Database"
- Wait for the schema to load

## 3. Start Asking Questions
- Go to the "Query Builder" tab
- Type natural language questions about your data
- Review the generated SQL and results

## 4. Explore Advanced Features
- **Dashboard**: Create visualizations and interactive charts
- **Optimization**: Analyze and improve query performance
- **Reports**: Generate comprehensive business intelligence reports
- **History**: Track your queries and save favorites

## 5. Tips for Success
- Start with simple questions about your data structure
- Use specific table and column names when possible
- Review the generated SQL to understand the AI's interpretation
- Save successful queries to favorites for reuse

## Common First Questions:
1. "Show me all tables in the database"
2. "How many rows are in [your_main_table]?"
3. "What columns are available in [your_main_table]?"
4. "Show me a sample of data from [your_main_table]"

## Getting Help:
- Check the built-in help in the application
- Review sample_queries.md for query examples
- Use the troubleshooting section in README.md
"""

    try:
        with open("QUICK_START.md", "w") as f:
            f.write(quick_start)
        print("   ✅ QUICK_START.md created")
    except:
        print("   ⚠️  Could not create QUICK_START.md")


def show_next_steps():
    """Show next steps to the user"""
    print("""
    🎉 Setup Complete! 
    
    Next Steps:
    
    1. 🚀 Launch the application:
       streamlit run main.py
    
    2. 🌐 Open your browser to:
       http://localhost:8501
    
    3. 📖 Quick references:
       • README.md - Complete documentation
       • QUICK_START.md - Getting started guide
       • sample_queries.md - Example queries
    
    4. 🆘 Need help?
       • Check the built-in help documentation
       • Review troubleshooting in README.md
       • Test configuration: python config.py
    
    Happy querying! 🎯
    """)


def main():
    """Main setup workflow"""
    print_banner()

    # Check Python version
    if not check_python_version():
        sys.exit(1)

    # Install requirements
    if not install_requirements():
        print("\n❌ Setup failed during package installation")
        sys.exit(1)

    # Create .env file
    if not create_env_file():
        print("\n❌ Setup failed during environment configuration")
        sys.exit(1)

    # Test configuration
    test_configuration()

    # Create sample files
    create_sample_files()

    # Show next steps
    show_next_steps()


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\n👋 Setup cancelled by user")
        sys.exit(1)
    except Exception as e:
        print(f"\n❌ Unexpected error during setup: {e}")
        sys.exit(1)
